# Libraries ---------------------------------------------------------------

library(tidyverse) ##tidy data
library(lubridate) ##date time
library(bupaR) ##buisness process analytics
library(processanimateR) ##animates process

# Load data ---------------------------------------------------------------

my_data <- '//ntpcts60.nntha.loc/shared_info/CSUs/NECS/Information Services/Analysis/Projects/Glasgow UEC/20190228_Darlington111.csv' %>% 
read_csv(col_types = list('c','f','T','f','c','f')
           , na="NULL") 

my_events <- my_data %>% eventlog(
    case_id = "patient",
    activity_id = "activity",
    activity_instance_id = "activity_instance",
    lifecycle_id = "status",
    timestamp = "timestamp",
    resource_id = "resource"
  )



#my_events <- patients

# processing time ---------------------------------------------------------

my_events %>%      activity_frequency("activity") %>% plot()


# process diagram ---------------------------------------------------------

my_events %>%
  process_map()

my_events %>%
process_map(performance(mean, "secs"))



# flags -------------------------------------------------------------------

my_flags <- data.frame(value = c(0,2,4,8,16,32,64,128)) %>% 
  mutate(mins = minutes(value))


my_timeflags <- my_events %>% 
  cases %>%
  crossing(my_flags) %>% 
  mutate(time = start_timestamp + mins) %>% 
  filter(time <= complete_timestamp) %>% 
  select("case" = patient,time,value) %>%  ##must be case, time, value
  arrange(case,time,value)
# process animate ---------------------------------------------------------



patients %>%
  animate_process(jitter=10)


my_events %>%
  filter_throughput_time(percentage = 0.75) %>% 
  animate_process(mode ="relative",
                  jitter=10)


my_animation <- my_events %>%
  animate_process(mode ="relative",
                  jitter=10,
                legend = "color", 
                mapping = token_aes(color = token_scale(my_timeflags
                                                       , scale = "ordinal"
                                                       , domain = c(0,2,4,8,16,32,64,128)
                                                       , range = rev(RColorBrewer::brewer.pal(8,"Spectral"))
                                                          )))





my_events %>%
  animate_process(jitter=10
                  ,legend="color"
                  ,mapping= token_aes(color = token_scale(throughput_time(my_events,"case"),scale="time", range = c("blue","red")))
                  )


animate_process(patients, 
                mapping = token_aes(color = token_scale("time", 
                                                        scale = "time", 
                                                        range = c("blue","red"))))


my_data %>%
  animate_process(
                  mapping= token_aes(shape = "image"
                                      , size = token_scale(10)
                                      , image = token_scale("//ntpcts60.nntha.loc/shared_info/CSUs/NECS/Information Services/Analysis/Projects/Glasgow UEC/old.png")
                                      )
                  )


# junk --------------------------------------------------------------------

  

my_events %>% left_join(my_event_starts) %>% head()


df_events <- data.frame(my_events)%>%  # convert object
  select(- .order) %>% #remove this col as we don't need it and it messes with the spread function
  spread(patient, timestamp) %>% 
  mutate(duration = difftime(pmax(schedule,start,complete, na.rm = TRUE),pmin(schedule,start,complete, na.rm = TRUE),units="mins")) %>%
  gather( key="status", value="timestamp",
   -c(patient
    ,activity
    ,activity_instance
    ,resource
    ,duration)
  , na.rm = TRUE
  )


my_animation <- my_events %>%
  animate_process(jitter=10)



lactic <- sepsis %>%
  mutate(lacticacid = as.numeric(lacticacid)) %>%
  filter_activity(c("LacticAcid")) %>%
  as.data.frame() %>%
  select("case" = case_id, 
         "time" =  timestamp, 
         value = lacticacid) # format needs to be 'case,time,value'

# Remove the measurement events from the sepsis log
sepsisBase <- sepsis %>%
  filter_activity(c("LacticAcid", "CRP", "Leucocytes", "Return ER",
                    "IV Liquid", "IV Antibiotics"), reverse = T) %>%
  filter_trace_frequency(percentage = 0.95)

# Animate with the secondary data frame `lactic`
animate_process(sepsisBase, 
                mode = "relative", 
                duration = 300,
                legend = "color", 
                mapping = token_aes(color = token_scale(lactic, 
                                                        scale = "linear", 
                                                        range = c("#fff5eb","#7f2704"))))





my_flags <- data.frame(value = c(0,2,4,8,16)) %>% 
  mutate(mins = days(value))


my_timeflags <- patients %>% 
  cases %>%
  crossing(my_flags) %>% 
  mutate(time = start_timestamp + mins) %>% 
  filter(time <= complete_timestamp) %>% 
  select("case" = patient,time,value) ##must be case, time, value


patients %>%
  animate_process(mode ="absolute",
        jitter=10,
        legend = "color", 
        mapping = token_aes(
          color = token_scale(my_timeflags
                             , scale = "ordinal"
                             , domain = my_flags$value
                             , range = rev(RColorBrewer::brewer.pal(5,"Spectral"))
                  )))
