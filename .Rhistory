library(processanimateR) ##animates process
my_flags <- data.frame(value = c(0,2,4,8,16)) %>%
mutate(mins = days(value))
library(dplyr) ##pipes and tidy code
# Libraries ---------------------------------------------------------------
library(dplyr) ##pipes and tidy code
library(lubridate) ##date time
library(bupaR) ##buisness process analytics
library(processanimateR) ##animates process
# Create performance times ------------------------------------------------
my_flags <- data.frame(value = c(0,2,4,8,16)) %>%
mutate(mins = days(value))
my_timeflags <- patients %>%
cases %>%
crossing(my_flags) %>%
mutate(time = start_timestamp + mins) %>%
filter(time <= complete_timestamp) %>%
select("case" = patient,time,value) ##must be case, time, value
# Animate process ---------------------------------------------------------
patients %>%
animate_process(mode ="absolute",
jitter=10,
legend = "color",
mapping = token_aes(
color = token_scale(my_timeflags
, scale = "ordinal"
, domain = my_flags$value
, range = rev(RColorBrewer::brewer.pal(5,"Spectral"))
)))
# Libraries ---------------------------------------------------------------
library(tidyverse) ##pipes and tidy code
library(lubridate) ##date time
library(bupaR) ##buisness process analytics
library(processanimateR) ##animates process
# Create performance times ------------------------------------------------
my_flags <- data.frame(value = c(0,2,4,8,16)) %>%
mutate(mins = days(value))
my_timeflags <- patients %>%
cases %>%
crossing(my_flags) %>%
mutate(time = start_timestamp + mins) %>%
filter(time <= complete_timestamp) %>%
select("case" = patient,time,value) ##must be case, time, value
# Animate process ---------------------------------------------------------
patients %>%
animate_process(mode ="absolute",
jitter=10,
legend = "color",
mapping = token_aes(
color = token_scale(my_timeflags
, scale = "ordinal"
, domain = my_flags$value
, range = rev(RColorBrewer::brewer.pal(5,"Spectral"))
)))
source('//ntpcts60.nntha.loc/shared_info/CSUs/NECS/Information Services/Analysis/Teams/Projects/Dominic/ProcessAnimateR_vignette/ProcessAnimateR_vignette.R', echo=TRUE)
source('//ntpcts60.nntha.loc/shared_info/CSUs/NECS/Information Services/Analysis/Teams/Projects/Dominic/ProcessAnimateR_vignette/ProcessAnimateR_vignette.R', echo=TRUE)
library(knitr)
update(knitr)
update.packages('knitr')
file.edit("~/.Renviron")
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
.libPaths()
x <- libPaths()
x <- .libPaths()
myPaths <- .libPaths()   # get the paths
myPaths <- c(myPaths[2], myPaths[1])  # switch them
.libPaths(myPaths)  # reassign them
.libPaths('//pdc-sys-fil-01.systems.informatix.loc/NECSU_Home/Dominic.Rowney/Documents/R/win-library/3.5')
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "//pdc-sys-fil-01.systems.informatix.loc/NECSU_Home/Dominic.Rowney/Documents/R/win-library/3.5/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
